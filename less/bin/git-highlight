#!/bin/bash
# -*- indent-tabs-mode: t; tab-width: 4; -*-

function help
{
	echo "Usage: git highlight [REV] FILE"
	echo
	echo "Highlight FILE with Git revisions. If REV is given, start from that revision."
}

case $# in
	1)
		FILE=$1
		;;
	2)
		REV=$1
		FILE=$2
		;;
	*)
		help
		exit 1
		;;
esac

cd "$(dirname "$FILE")" || exit 1
FILE=$(basename "$FILE")

function highlight-file {
	if [[ -v REV ]]
	then
		TEMP=$(mktemp --suffix="@$REV@$FILE")
		trap 'rm "$TEMP"' EXIT
		git show "$REV:./$FILE" > "$TEMP"
		FILE=$TEMP
	fi
	source-highlight --out-format=esc -i "$FILE" 2> /dev/null || cat "$FILE"
}

git ls-files --error-unmatch "$FILE" > /dev/null || {
	highlight-file
	exit
}


function most-recent-shas {
	awk -f- <(git blame --porcelain $REV "$FILE") <<-"EOF"
		$1 ~ /[[:xdigit:]]{40}/ {
			sha = $1
		}

		$1 == "author-time" {
			time = strtonum($2)

			if (time <= time2)
				next

			if (time <= time1) {
				time2 = time
				sha2 = sha
				next
			}

			time2 = time1
			sha2 = sha1

			if (time <= time0) {
				time1 = time
				sha1 = sha
                next
			}

			time1 = time0
			sha1 = sha0

			time0 = time
			sha0 = sha
		}

		END {
			print sha0, sha1, sha2
		}
	EOF
}

function sha-stream {
	awk -vsha0="$1" -vsha1="$2" -vsha2="$3" -f- <(git blame --porcelain $REV "$FILE") <<-"EOF"
		BEGIN {
			colors[sha0] = 32
			colors[sha1] = 33
			colors[sha2] = 36
		}

		$1 ~ /^[[:xdigit:]]{40}$/ {
			color = colors[$1]
			format = color ? sprintf("\033[%sm%%s\033[m\n", color) : "%s\n"
			printf format, substr($1, 1, 8)
		}
	EOF
}

paste <(sha-stream $(most-recent-shas)) <(highlight-file)
